server:
  port: 8888

logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.boot.autoconfigure: DEBUG

spring:
  thymeleaf:
    cache: false
    user:
      name: admin
      password: admax

kc:
  master:
    realm:
      user:
        name: admin
        password: admin
      client:
        id: localhost8888
  target:
    realm: myrealm


keycloak:
  auth-server-url: http://192.168.0.134:8080/auth
  realm: myrealm
  resource: localhost8888
  ssl-required: none
  public-client: true
  security-constraints[0].authRoles[0]: ROLE_VIEWER
  security-constraints[0].securityCollections[0].patterns[0]: /*
  principal-attribute: preferred_username

security:
  enabled: true
  oauth2:
    client:
      registration:
        keycloak:
          client-id: localhost8888
          client-secret: keycloak
          clientName: keyCloak
          authorization-grant-type: authorization_code
          redirectUriTemplate: '{baseUrl}/login/oauth2/code/{registrationId}'
          scope:
            - openid
            - profile
            - email

      provider:
        keycloak:
          authorization-uri: http://192.168.0.134:8080/auth/realms/myrealm/protocol/openid-connect/auth
          token-uri: http://192.168.0.134:8080/auth/realms/myrealm/protocol/openid-connect/token
          user-info-uri: http://192.168.0.134:8080/auth/realms/myrealm/protocol/openid-connect/userinfo
          jwk-set-uri: http://192.168.0.134:8080/auth/realms/myrealm/protocol/openid-connect/certs
          user-name-attribute: preferred_username

management:
  security:
    enabled: false


# 除了几个必填的配置项外，另外需要注意的几个配置项如下
# credentials.secret：上文添加客户端后Credentials Tab内对应的内容
# bearer-only：设置为true，表示此应用的Keycloak访问类型是bearer-only
# cors：设置为true表示允许跨域访问
# security-constraints：主要是针对不同的路径定义角色以达到权限管理的目的
#   /customer：只允许拥有ROLE_CUSTOMER角色的用户才能访问
#   /admin：只允许拥有ROLE_ADMIN角色的用户才能访问
#   未配置的路径表示公开访问